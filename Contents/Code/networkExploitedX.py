import PAsearchSites
import PAgenres
import PAactors
import PAutils


def search(results, encodedTitle, searchTitle, siteNum, lang, searchDate):
    if siteNum == 978:
        url = PAsearchSites.getSearchSearchURL(siteNum)  # All models are on one page
    else:
        url = PAsearchSites.getSearchSearchURL(siteNum) + searchTitle[0:1]  # First letter of model's name

    req = PAutils.HTTPRequest(url)
    searchResults = HTML.ElementFromString(req.text)
    searchResultElements = searchResults.xpath('//a[starts-with(@href, "/free/girl/")][strong]')
    for searchResult in searchResultElements:
        titleNoFormatting = searchResult.text_content().strip()
        curID = PAutils.Encode(searchResult.xpath('@href')[0].split('/')[3])

        score = 100 - Util.LevenshteinDistance(searchTitle.lower(), titleNoFormatting.lower())

        if titleNoFormatting in searchTitle:
            modelLink = PAsearchSites.getSearchBaseURL(siteNum) + searchResult.xpath('@href')[0]
            modelReq = PAutils.HTTPRequest(modelLink)
            modelResults = HTML.ElementFromString(modelReq.text)

            sceneResults = modelResults.xpath('.//a[starts-with(@href, "/free/scene/")][strong]')

            if sceneResults:
                for modelResult in modelResults.xpath('//div[contains(@class, "videos")]'):
                    titleLine = modelResult.xpath('.//h5')[0].text_content().strip()
                    href = modelResult.xpath('.//a[starts-with(@href, "/free/scene/")][strong]/@href')[0]

                    titleNoFormatting = titleLine.split('-')[1].strip()
                    curID = PAutils.Encode(href.split('/')[3] + '/' + href.split('/')[4])
                    releaseDate = parse(titleLine.split('ADDED:')[1].split('-')[0].strip()).strftime('%Y-%m-%d')

                    score = 100 - Util.LevenshteinDistance(searchDate, releaseDate)

                    results.Append(MetadataSearchResult(id='%s|%d|%s' % (curID, siteNum, releaseDate), name='%s [%s] %s' % (titleNoFormatting, PAsearchSites.getSearchSiteName(siteNum), releaseDate), score=score, lang=lang))
            else:
                modelThumbnail = PAsearchSites.getSearchBaseURL(siteNum) + searchResult.xpath('./img/@src')[0]
                image = PAutils.HTTPRequest(modelThumbnail, headers={'Referer': 'http://www.google.com'})
                releaseDate = parse(image.headers['Last-Modified']).strftime('%Y-%m-%d')

                if releaseDate == '2016-01-01':  # Oldest image date, so could be anything pre 2016
                    releaseDate = ''

                score = 100 - Util.LevenshteinDistance(titleNoFormatting, searchTitle)
                if releaseDate and parse(searchDate).year >= 2016:  # Very good chance we can match on the date
                    delta = parse(searchDate) - parse(releaseDate)
                    if abs(delta.days) < 7:
                        score = 100  # High level of confidence right here
                    else:
                        score = score - 5
                elif releaseDate == '' and parse(searchDate).year < 2016:  # Older video
                    score = score - 10
                else:
                    score = score - 50

                results.Append(MetadataSearchResult(id='%s|%d|%s' % (curID, siteNum, searchDate), name='%s [%s] %s' % (titleNoFormatting, PAsearchSites.getSearchSiteName(siteNum), releaseDate), score=score, lang=lang))

    return results


def update(metadata, siteID, movieGenres, movieActors):
    metadata_id = str(metadata.id).split('|')
    curID = PAutils.Decode(metadata_id[0])
    if len(metadata_id) > 2:
        sceneDate = metadata_id[2]

    if '/' in curID:  # Viewing a Scene
        sceneURL = PAsearchSites.getSearchBaseURL(siteID) + '/free/scene/' + curID + '/ec'
    else:  # Viewing a Model
        sceneURL = PAsearchSites.getSearchBaseURL(siteID) + '/free/girl/' + curID + '/ec'

    req = PAutils.HTTPRequest(sceneURL)
    detailsPageElements = HTML.ElementFromString(req.text)

    # Title
    metadata.title = detailsPageElements.xpath('//h3/text()[1]')[0].strip()

    # Summary
    description = detailsPageElements.xpath('//meta[@name="description"]/@content')[0].strip()
    metadata.summary = description.strip()

    # Studio
    metadata.studio = 'ExploitedX'

    # Collections / Tagline
    metadata.collections.clear()
    tagline = PAsearchSites.getSearchSiteName(siteID)
    metadata.tagline = tagline
    metadata.collections.add(tagline)

    # Release Date
    if sceneDate:
        date_object = parse(sceneDate)
        metadata.originally_available_at = date_object
        metadata.year = metadata.originally_available_at.year

    # Genres
    movieGenres.clearGenres()
    for genreLink in detailsPageElements.xpath('//a[starts-with(@href, "/free/keywords")]'):
        genreName = genreLink.text_content().strip()

        movieGenres.addGenre(genreName)

    # Actors
    movieActors.clearActors()
    if '/' in curID:  # Viewing a Scene
        unique_list = []
        for modelLink in detailsPageElements.xpath('//a[starts-with(@href, "/free/girl/")]'):
            modelLinkUrl = PAsearchSites.getSearchBaseURL(siteID) + modelLink.xpath('./@href')[0]
            if modelLinkUrl not in unique_list:
                unique_list.append(modelLinkUrl)

            req = PAutils.HTTPRequest(modelLinkUrl)
            modelPageElements = HTML.ElementFromString(req.text)

            actorName = modelPageElements.xpath('//meta[@name="twitter:description"]/@content')[0].strip()
            actorPhotoURL = modelPageElements.xpath('//meta[@name="twitter:image"]/@content')[0].strip()

            movieActors.addActor(actorName, actorPhotoURL)
    else:  # Viewing a Model
        actorName = detailsPageElements.xpath('//meta[@name="twitter:description"]/@content')[0].strip()
        actorPhotoURL = detailsPageElements.xpath('//meta[@name="twitter:image"]/@content')[0].strip()

        movieActors.addActor(actorName, actorPhotoURL)

    # Posters
    art = []
    xpaths = [
        '//meta[@name="twitter:image"]/@content',
    ]

    for xpath in xpaths:
        for img in detailsPageElements.xpath(xpath):
            art.append(img)

    Log('Artwork found: %d' % len(art))
    for idx, posterUrl in enumerate(art, 1):
        if not PAsearchSites.posterAlreadyExists(posterUrl, metadata):
            # Download image file for analysis
            try:
                image = PAutils.HTTPRequest(posterUrl, headers={'Referer': 'http://www.google.com'})
                im = StringIO(image.content)
                resized_image = Image.open(im)
                width, height = resized_image.size
                # Add the image proxy items to the collection
                if width > 1:
                    # Item is a poster
                    metadata.posters[posterUrl] = Proxy.Media(image.content, sort_order=idx)
                if width > 100 and width > height:
                    # Item is an art item
                    metadata.art[posterUrl] = Proxy.Media(image.content, sort_order=idx)
            except:
                pass

    return metadata
