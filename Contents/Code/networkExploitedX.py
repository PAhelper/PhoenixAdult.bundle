import PAsearchSites
import PAgenres
import PAactors
import PAutils


def search(results, encodedTitle, searchTitle, siteNum, lang, searchDate):
    splited = searchTitle.split()
    girlID = None
    sceneID = None
    if unicode(splited[0], 'UTF-8').isdigit() and unicode(splited[1], 'UTF-8').isdigit():
        girlID = splited[0]
        sceneID = splited[1]
        searchTitle = ' '.join(splited)

    if girlID and sceneID:
        url = PAsearchSites.getSearchBaseURL(siteNum) + '/free/scene/%s/%s/ecg' % (girlID, sceneID)
        req = PAutils.HTTPRequest(url)
        searchResults = HTML.ElementFromString(req.text)

        titleNoFormatting = searchResults.xpath('//h3/text()[1]')[0].text_content().strip()
        curID = PAutils.Encode(url)
        releaseDate = searchDate if searchDate else ''
        score = 100

        results.Append(MetadataSearchResult(id='%s|%d|%s' % (curID, siteNum, releaseDate), name='%s [%s] %s' % (titleNoFormatting, PAsearchSites.getSearchSiteName(siteNum), releaseDate), score=score, lang=lang))
    else:
        searchResults = []
        googleResults = PAutils.getFromGoogleSearch(searchTitle, siteNum)
        for girlURL in googleResults:
            if ('/free/girl/' in girlURL and girlURL not in searchResults):
                searchResults.append(girlURL)

        for sceneURL in searchResults:
            req = PAutils.HTTPRequest(sceneURL)
            HTMLResponse = HTML.ElementFromString(req.text)
            if HTMLResponse.xpath('//div[@class="videos box-shadow"]') and siteNum == 978:
                for searchResult in HTMLResponse.xpath('//div[@class="videos box-shadow"]'):
                    titleNoFormatting = searchResult.xpath('./h5/strong/text()')[0].split('-')[1]

                    try:
                        releaseDate = parse(searchResult.xpath('./h5/strong/text()')[0].split('ADDED:')[1].split('-')[0]).strftime('%Y-%m-%d')
                    except:
                        pass
                    if not releaseDate:
                        releaseDate = searchDate if searchDate else ''

                    sceneURL = PAsearchSites.getSearchBaseURL(siteNum) + searchResult.xpath('./div[@class="text-center buttons"]/a/@href')[0].strip()
                    curID = PAutils.Encode(sceneURL)

                    if searchDate:
                        score = 100 - Util.LevenshteinDistance(searchDate, releaseDate)
                    else:
                        score = 100 - Util.LevenshteinDistance(searchTitle.lower(), titleNoFormatting.lower())

                    results.Append(MetadataSearchResult(id='%s|%d|%s' % (curID, siteNum, releaseDate), name='%s [%s] %s' % (titleNoFormatting, PAsearchSites.getSearchSiteName(siteNum), releaseDate), score=score, lang=lang))
            else:
                curID = PAutils.Encode(sceneURL)
                releaseDate = searchDate if searchDate else ''
                titleNoFormatting = HTMLResponse.xpath('//h3/text()[1]')[0].strip()

                score = 100 - Util.LevenshteinDistance(searchTitle.lower(), titleNoFormatting.lower())

                results.Append(MetadataSearchResult(id='%s|%d|%s' % (curID, siteNum, releaseDate), name='%s [%s] %s' % (titleNoFormatting, PAsearchSites.getSearchSiteName(siteNum), releaseDate), score=score, lang=lang))

    return results


def update(metadata, siteID, movieGenres, movieActors):
    metadata_id = str(metadata.id).split('|')
    sceneURL = PAutils.Decode(metadata_id[0])
    if len(metadata_id) > 2:
        sceneDate = metadata_id[2]

    req = PAutils.HTTPRequest(sceneURL)
    detailsPageElements = HTML.ElementFromString(req.text)

    # Title
    metadata.title = detailsPageElements.xpath('//h3/text()[1]')[0].strip()

    # Summary
    metadata.summary = detailsPageElements.xpath('//meta[@name="description"]/@content')[0].strip()

    # Studio
    metadata.studio = 'ExploitedX'

    # Collections / Tagline
    metadata.collections.clear()
    tagline = PAsearchSites.getSearchSiteName(siteID)
    metadata.tagline = tagline
    metadata.collections.add(tagline)

    # Release Date
    if sceneDate:
        try:
            date_object = parse(sceneDate)
            metadata.originally_available_at = date_object
            metadata.year = metadata.originally_available_at.year
        except:
            pass

    # Genres
    movieGenres.clearGenres()
    for genreLink in detailsPageElements.xpath('//a[starts-with(@href, "/free/keywords")]'):
        genreName = genreLink.text_content().strip()

        movieGenres.addGenre(genreName)

    # Actors
    movieActors.clearActors()
    for actorLink in detailsPageElements.xpath('//a[starts-with(@href, "/free/girl/")]'):
        actorLink = actorLink.xpath('./@href')[0].strip()
        actorURL = PAsearchSites.getSearchBaseURL(siteID) + actorLink

        req = PAutils.HTTPRequest(actorURL)
        actorPageElements = HTML.ElementFromString(req.text)
        actorName = actorPageElements.xpath('//meta[@name="twitter:description"]/@content')[0].strip()
        actorPhotoURL = actorPageElements.xpath('//meta[@name="twitter:image"]/@content')[0].strip()

        movieActors.addActor(actorName, actorPhotoURL)

    # Posters
    art = []
    xpaths = [
        '//meta[@name="twitter:image"]/@content',
        '//article[@id="hd-clips"]/div/div/div/a/img/@src',
        '//div[@class="videos box-shadow"]//div/div/a/img/@src',
        '//div[contains(@class, "videos box-shadow")]//div/div/a/img/@src'
    ]

    for xpath in xpaths:
        for img in detailsPageElements.xpath(xpath):
            if not img.startswith('http'):
                img = PAsearchSites.getSearchBaseURL(siteID) + img

            art.append(img)

    Log('Artwork found: %d' % len(art))
    for idx, posterUrl in enumerate(art, 1):
        if not PAsearchSites.posterAlreadyExists(posterUrl, metadata):
            # Download image file for analysis
            try:
                image = PAutils.HTTPRequest(posterUrl, headers={'Referer': 'http://www.google.com'})
                im = StringIO(image.content)
                resized_image = Image.open(im)
                width, height = resized_image.size
                # Add the image proxy items to the collection
                if width > 1:
                    # Item is a poster
                    metadata.posters[posterUrl] = Proxy.Media(image.content, sort_order=idx)
                if width > 100 and width > height:
                    # Item is an art item
                    metadata.art[posterUrl] = Proxy.Media(image.content, sort_order=idx)
            except:
                pass

    return metadata
